name: app/build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: infra-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    env:
      BASE_URL: localhost:8080

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## git
          \`\`\`
          Repository: $GITHUB_REPOSITORY
          Ref: $GITHUB_REF
          \`\`\`
          ## System
          \`\`\`
          Runner: $(uname -a)
          Docker: $(docker --version)
          Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}
          \`\`\`
          EOF

      - name: Docker / Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker / setup
        uses: docker/setup-buildx-action@v3

      - name: Docker / build
        id: build
        uses: docker/build-push-action@v5
        with:
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app-web:latest
          file: build/Dockerfile
          load: true
          context: .
          target: app

      - name: Docker / package
        run: |
          IMAGE_ID=$(docker images --format "{{.ID}}" ${{ secrets.DOCKERHUB_USERNAME }}/app-web:latest | head -n 1)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## Package
          \`\`\`
          Image ID: $IMAGE_ID
          Image Tag: ${{ secrets.DOCKERHUB_USERNAME }}/app-web:latest
          \`\`\`
          EOF

      - name: Tests / setup
        run: |
          container_id=$(docker run -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/app-web:latest)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## Test
          \`\`\`
          Container ID: $container_id
          \`\`\`
          EOF

          timeout=10
          counter=0
          until [ "$(curl -o /dev/null -s -w '%{http_code}' http://${BASE_URL}/)" -eq 200 ]; do
            counter=$((counter+1))
            if [ $counter -ge $timeout ]; then
              echo "## Error: Service did not respond within ${timeout}s." >> $GITHUB_STEP_SUMMARY
              docker logs "$container_id" && docker stop "$container_id"
              exit 1
            fi
            sleep 1
          done

      - name: Tests / End-to-End
        run: |
          response=$(curl -s http://localhost:8080/)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## Health Check
          \`\`\`
          $response
          \`\`\`
          EOF
