name: app/build

on:
  push:
    branches: [ master ]
    paths:
      - build/**
      - src/**
      - test/**
  pull_request:
    branches: [ master ]

concurrency:
  group: infra-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    env:
      BASE_HOST: app
      BASE_PORT: 8080

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## git
          \`\`\`
          Repository: $GITHUB_REPOSITORY
          Ref: $GITHUB_REF
          \`\`\`
          ## System
          \`\`\`
          Runner: $(uname -a)
          Docker: $(docker --version)
          \`\`\`
          EOF

      - name: Docker / Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker / setup
        uses: docker/setup-buildx-action@v3

      - name: Docker / build
        id: build
        uses: docker/build-push-action@v5
        with:
          tags: app-web:latest
          file: build/Dockerfile
          load: true
          context: .
          target: app

      - name: Docker / package
        run: |
          IMAGE_ID=$(docker images --format "{{.ID}}" app-web:latest | head -n 1)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## Package
          \`\`\`
          Image ID: $IMAGE_ID
          Image Tag: app-web:latest
          \`\`\`
          EOF

      - name: Tests / setup
        run: |
          docker network create test-network
          container_id=$(docker run -d --name ${BASE_HOST} -p ${BASE_PORT}:${BASE_PORT} app-web:latest)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## Test
          \`\`\`
          Container ID: $container_id
          \`\`\`
          EOF
          timeout=10
          counter=0
          until [ "$(curl -o /dev/null -s -w '%{http_code}' http://localhost:${BASE_PORT}/)" -eq 200 ]; do
            counter=$((counter+1))
            if [ $counter -ge $timeout ]; then
              echo "## Error: Service did not respond within ${timeout}s." >> $GITHUB_STEP_SUMMARY
              docker logs "$container_id" && docker stop "$container_id"
              exit 1
            fi
            sleep 1
          done

      - name: Tests / Functional
        run: |
          response=$(curl -s http://localhost:${BASE_PORT}/)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## GET /
          \`\`\`
          $response
          \`\`\`
          EOF
          response=$(curl -v -X POST -d '{"text": "I absolutely love this!"}' http://localhost:${BASE_PORT}/hash)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## POST /hash
          \`\`\`
          $response
          \`\`\`
          EOF

#      - name: Tests / End-to-End
#        run: |
#          docker run --rm --network test-network \
#            -v "$(pwd)/test/tests.js:/app/tests.js" \
#            -e BASE_URL="${BASE_URL}:${BASE_PORT}" \
#            grafana/k6 run --quiet /app/tests.js | tee report.txt
#
#          cat <<EOF >> $GITHUB_STEP_SUMMARY
#          ## Tests
#          \`\`\`
#          $(cat report.txt)
#          \`\`\`
#          EOF

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: tf/app-cd-on-fargate/web
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag app-web:latest $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG