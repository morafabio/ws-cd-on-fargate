name: app/build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: infra-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    env:
      - BASE_URL: localhost:8080

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure
        run: |
          echo "## git" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "Repository: $GITHUB_REPOSITORY" >> $GITHUB_OUTPUT
          echo "Ref: $GITHUB_REF" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "## System" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "Runner: $(uname -a)" >> $GITHUB_OUTPUT
          echo "Docker: $(docker --version)" >> $GITHUB_OUTPUT
          echo "Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT

      - name: Docker / Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker / setup
        uses: docker/setup-buildx-action@v3

      - name: Docker / build
        id: build
        uses: docker/build-push-action@v5
        with:
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app-web:latest
          file: build/Dockerfile
          load: true
          context: .
          target: app

      - name: Docker / package
        run: |
          IMAGE_ID=$(docker images --format "{{.ID}}" ${{ secrets.DOCKERHUB_USERNAME }}/app-web:latest | head -n 1)
          echo "## Package" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "Image ID: $IMAGE_ID" >> $GITHUB_OUTPUT
          echo "Image Tag: ${{ secrets.DOCKERHUB_USERNAME }}/app-web:latest" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT

      - name: Tests / setup
        run: |
          container_id=$(docker run -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/app-web:latest)
          echo "## Test" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "Container ID: $container_id" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT

          timeout=10
          counter=0
          until [ "$(curl -o /dev/null -s -w '%{http_code}' http://${BASE_URL}/)" -eq 200 ]; do
            counter=$((counter+1))
            if [ $counter -ge $timeout ]; then
              echo "## Error: Service did not respond within ${timeout}s." >> $GITHUB_OUTPUT
              docker logs "$container_id" && docker stop "$container_id"
              exit 1
            fi
            sleep 1
          done

      - name: Tests / End-to-End
        run: |
          response=$(curl -s http://localhost:8080/)
          echo "## Health Check" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "$response" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT

#      - name: Tests / End-to-End
#        run: |
#          docker run --rm \
#            -v "$(pwd)/test/features.js:/app/tests.js" \
#            -e BASE_URL=http://host.docker.internal:8080 \
#            grafana/k6 run /app/tests.js | tee report.txt
#
#          echo "## Tests Report" >> $GITHUB_OUTPUT
#          echo '```' >> $GITHUB_OUTPUT
#          cat report.txt >> $GITHUB_OUTPUT
#          echo '```' >> $GITHUB_OUTPUT
