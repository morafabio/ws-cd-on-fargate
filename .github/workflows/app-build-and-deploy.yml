name: app/build-and-deploy

on:
  push:
    branches: [ master, dev-* ]
    paths:
      - .github/workflows/app-*
      - build/**
      - src/**
      - test/**
  workflow_dispatch:
    inputs:
      deploy:
        type: choice
        description: 'Do deploy?'
        options:
          - 'true'
          - 'false'
        required: true
        default: 'false'
      run_e2e_tests:
        type: choice
        description: 'Run E2E tests'
        options:
          - 'true'
          - 'false'
        required: true
        default: 'false'

concurrency:
  group: app-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    env:
      BASE_HOST: app
      BASE_PORT: 8080
      ECS_CLUSTER: tf-dev
      ECS_SERVICE: app-cd-on-fargate-web
      ECS_TASK_DEFINITION: build/task-definition.json
      ECR_REPOSITORY_NAME: tf/app-cd-on-fargate/web
      CONTAINER_NAME: app

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## git
          \`\`\`
          Repository: $GITHUB_REPOSITORY
          Ref: $GITHUB_REF
          \`\`\`
          ## System
          \`\`\`
          Runner: $(uname -a)
          Docker: $(docker --version)
          \`\`\`
          EOF

      - name: Docker / Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws-region: "${{ secrets.AWS_DEFAULT_REGION }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker / setup
        uses: docker/setup-buildx-action@v3

      - name: Docker / build
        id: build
        uses: docker/build-push-action@v5
        with:
          tags: app-web:latest
          file: build/Dockerfile
          load: true
          context: .
          target: app

      - name: Tests / Setup
        run: |
          docker network create test-network
          container_id=$(docker run -d --name ${BASE_HOST} --network test-network -p ${BASE_PORT}:${BASE_PORT} app-web:latest)
          timeout=10
          counter=0
          until [ "$(curl -o /dev/null -s -w '%{http_code}' http://localhost:${BASE_PORT}/health)" -eq 200 ]; do
            counter=$((counter+1))
            if [ $counter -ge $timeout ]; then
              echo "## Error: Service did not respond within ${timeout}s." >> $GITHUB_STEP_SUMMARY
              docker logs "$container_id" && docker stop "$container_id"
              exit 1
            fi
            sleep 1
          done

      - name: Tests / Functional
        run: |
          response=$(curl -s http://localhost:${BASE_PORT}/health)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## GET /health
          \`\`\`
          $response
          \`\`\`
          EOF
          response=$(curl -i -d '{"text": "I absolutely love this!"}' http://localhost:${BASE_PORT}/hash)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## POST /hash 
          \`\`\`
          $response
          \`\`\`
          EOF

      - name: Tests / End-to-End
        if: ${{ github.event.inputs.run_e2e_tests == 'true' || 'true' }}
        run: |
          tests=$(docker run --rm --network test-network \
            -v "$(pwd)/test/tests.js:/app/tests.js" \
            grafana/k6 run /app/tests.js)
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## End-to-End
          \`\`\`
          $tests
          \`\`\`
          EOF

      - name: Tag and push image to Amazon ECR
        id: build-image
        if: ${{ success() && ( github.event.inputs.deploy == 'true' || startsWith(github.ref, 'refs/tags/') ) }}
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag app-web:latest $REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          docker push $REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "image=$REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        if: ${{ steps.build-image.outcome == 'success' }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        id: ecs-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        if: ${{ steps.task-def.outcome == 'success' }}
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
